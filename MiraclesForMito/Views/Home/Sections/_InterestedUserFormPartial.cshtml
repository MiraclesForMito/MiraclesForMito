@model MiraclesForMito.Models.InterestedUserModel

@using (@Html.BeginForm( new { role="form", action="#", method="post"})){

	<div class="row">
		
					<div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
						@Html.ValidationSummary()
					</div>
					<div class="col-lg-6 col-md-6 col-sm-6 col-xs-6">
						<div class="form-group">
						@{
							object formControlClass = new {@class = "form-control"};
						}
						@*
						Listing 26-4, must use TextBoxFor, no EditorFor, if want Bootstrap styling?
						*@
							@Html.LabelFor(m=>m.FirstName)
							@Html.TextBoxFor(m=>m.FirstName, formControlClass)
						</div>
						<div class="form-group">
							@Html.LabelFor(m=>m.LastName)
							@Html.TextBoxFor(m=>m.LastName, formControlClass)
						</div>
					</div>
					<div class="col-lg-6 col-md-6 col-sm-6  col-xs-6">
						<div class="form-group">
							@Html.LabelFor(m=>m.Email)
							@Html.TextBoxFor(m=>m.Email, formControlClass)
						</div>
						<div class="form-group">
							@Html.LabelFor(m=>m.PhoneNumber)
							@Html.TextBoxFor(m=>m.PhoneNumber, formControlClass)
						</div>
					</div>
				</div>

				<div class="row">
					<div class="col-lg-12">
						<div class="form-group">
						@Html.LabelFor(m=>m.InterestedIn)
						
						@Html.DropDownListFor(m=>m.InterestedIn, Enum.GetValues(Model.InterestedIn.GetType())
							.Cast<Enum>()
							.Select(m=> {
								string enumVal = Enum.GetName(Model.InterestedIn.GetType(), m); 
								return new SelectListItem {
									Selected = (Model.InterestedIn.ToString() == enumVal),  
									Text = MiraclesForMito.Utilities.Util.CamelCaseToSentenceCase(enumVal),  
									Value = enumVal }; } ), formControlClass)
						</div>
						<button type="submit" class="btn">Send</button>
					</div>
		</div>
}
		